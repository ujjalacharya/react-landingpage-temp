1
00:00:00,650 --> 00:00:01,160
Or write.

2
00:00:01,160 --> 00:00:03,990
So now we're going to do the reset passport.

3
00:00:04,160 --> 00:00:04,650
Right.

4
00:00:04,790 --> 00:00:09,700
So if the user of course I'm now logged in as Frances Jones and ref.

5
00:00:09,740 --> 00:00:10,080
OK.

6
00:00:10,100 --> 00:00:12,970
So for example I log out and I want to log in.

7
00:00:12,980 --> 00:00:15,160
And I just you know forget my password.

8
00:00:15,170 --> 00:00:21,260
So we can add a burden right here where we can go to a new route where we can send an email and the

9
00:00:21,260 --> 00:00:27,670
user will get an email with the token so they can go to a new link and reset the user and the password.

10
00:00:27,710 --> 00:00:31,400
And of course we need to validate that token and everything everything else.

11
00:00:31,400 --> 00:00:33,770
So we need to do quite a few things right here.

12
00:00:33,860 --> 00:00:36,390
You know a lot of things so go.

13
00:00:36,530 --> 00:00:41,900
So let's begin with the first part which is going to be creating a route where the user can send an

14
00:00:41,930 --> 00:00:42,480
e-mail.

15
00:00:42,500 --> 00:00:42,940
Right.

16
00:00:42,980 --> 00:00:43,490
OK.

17
00:00:43,850 --> 00:00:48,580
So I'm going to go to component's going to create a new directory because we need two routes.

18
00:00:48,710 --> 00:00:53,360
The route that the user is going to be entering the email and the other one when they come back with

19
00:00:53,360 --> 00:00:56,070
the token and they put the passwords.

20
00:00:56,090 --> 00:01:04,530
So I'm going to create a new folder and I'm going to call that reset reset underscore and user.

21
00:01:04,550 --> 00:01:05,270
Makes sense.

22
00:01:05,480 --> 00:01:06,240
Yeah.

23
00:01:06,710 --> 00:01:08,510
Now the index is going to index.

24
00:01:08,510 --> 00:01:09,850
You can call this whatever you want.

25
00:01:09,870 --> 00:01:14,870
This case the index is going to be worthy users going to send the mail and then again to create a new

26
00:01:14,870 --> 00:01:19,150
route which is going to be when the user comes back from the e-mail.

27
00:01:19,160 --> 00:01:19,910
Right.

28
00:01:19,910 --> 00:01:27,140
So file a file and then reset past that that's going to do this later of course.

29
00:01:27,200 --> 00:01:31,080
Now the index this one is going to be class based components.

30
00:01:31,100 --> 00:01:33,570
So re-act class based components.

31
00:01:34,460 --> 00:01:38,420
And I'm going to call it reset and then user.

32
00:01:38,810 --> 00:01:39,760
All right.

33
00:01:40,070 --> 00:01:40,870
Going to save it.

34
00:01:41,240 --> 00:01:47,210
Now of course we need to put a few things but for now I'm just going to say reset user and of course

35
00:01:47,210 --> 00:01:48,990
we need to add it to ramps.

36
00:01:49,130 --> 00:01:55,130
So let's go to route and I'm going to import it right here at the top.

37
00:01:55,340 --> 00:02:06,100
So important then reset user from that forward slash components for Slash reset user.

38
00:02:06,110 --> 00:02:09,130
And we don't need to bring anything else because this is an index.

39
00:02:09,350 --> 00:02:09,810
OK.

40
00:02:10,070 --> 00:02:12,640
So the next thing putting the round right here.

41
00:02:12,740 --> 00:02:16,780
So I'm gonna put it right here on the bottom.

42
00:02:16,870 --> 00:02:17,900
Let me copy one.

43
00:02:17,900 --> 00:02:19,750
This one's this.

44
00:02:19,760 --> 00:02:26,660
Now if we think about this this reset user is just like the log in I'm sorry the register or the log

45
00:02:26,660 --> 00:02:31,680
in because the user if it's logged in should be able to enter to that route.

46
00:02:31,700 --> 00:02:32,310
Right.

47
00:02:32,360 --> 00:02:36,680
So going to enter to there we are going to copy the one that says register because it's pretty much

48
00:02:36,680 --> 00:02:38,170
just the same thing.

49
00:02:38,390 --> 00:02:45,250
And I'm going to say that the user needs to go to reset the user.

50
00:02:45,440 --> 00:02:48,440
And of course we will use the correct component right here.

51
00:02:48,500 --> 00:02:49,540
Reset user.

52
00:02:49,760 --> 00:02:50,100
Right.

53
00:02:50,210 --> 00:02:51,060
So it's false.

54
00:02:51,080 --> 00:02:53,540
Arayan not know.

55
00:02:53,600 --> 00:02:54,530
All right.

56
00:02:54,990 --> 00:02:59,250
So let's see what happens if I go to reset user.

57
00:02:59,400 --> 00:03:00,980
We get we said user.

58
00:03:00,990 --> 00:03:01,330
All right.

59
00:03:01,350 --> 00:03:07,750
So we are kind of good to go to the component and start bringing all the things we need to bring.

60
00:03:07,860 --> 00:03:11,020
So we need to bring the form actions.

61
00:03:11,190 --> 00:03:15,630
Now I don't want to tie all of this again so I'm going to go to the we just have a log in can go to

62
00:03:15,630 --> 00:03:22,860
register and I get a copy the form actions right here and I'm going to paste it.

63
00:03:23,340 --> 00:03:23,790
All right.

64
00:03:23,790 --> 00:03:27,900
So we have the update general data and the form ballot.

65
00:03:27,900 --> 00:03:29,840
That's what that's what we need right now.

66
00:03:30,090 --> 00:03:30,570
All right.

67
00:03:30,780 --> 00:03:36,920
We need the form feels so I'm going to copy form field and paste it down here and that's it for now.

68
00:03:36,970 --> 00:03:37,780
Good.

69
00:03:37,950 --> 00:03:43,810
Now I'm going to bring ASIO's again just like sorry and just like we did before.

70
00:03:43,950 --> 00:03:49,710
I'm not going to go to redux and just going to do it from here just to save time.

71
00:03:49,710 --> 00:03:50,230
All right.

72
00:03:50,370 --> 00:03:53,660
So then of course which if this is going to be a forum right.

73
00:03:53,670 --> 00:03:58,460
Just one single and put so you know the form it's simple but we also need the state.

74
00:03:58,530 --> 00:04:02,180
So I'm going to copy this one right here at the top.

75
00:04:02,190 --> 00:04:06,830
I'm going to paste it and then close and then close the state.

76
00:04:06,960 --> 00:04:12,870
Now aside from data we have an e-mail so I'm going to copy the e-mail and I'm going to paste it right

77
00:04:12,870 --> 00:04:14,160
here and that's it.

78
00:04:14,160 --> 00:04:16,350
You know that's the only thing we need to do.

79
00:04:16,350 --> 00:04:20,820
Of course if you want to do everything by hand you can still do it.

80
00:04:20,820 --> 00:04:23,900
Now we need the update form and the submit form.

81
00:04:24,090 --> 00:04:29,260
So I'm going to go again a copy update form update form.

82
00:04:29,340 --> 00:04:31,730
And then again to change the tack for this.

83
00:04:31,780 --> 00:04:39,560
So reset email email and I'm going to do the submit form.

84
00:04:39,630 --> 00:04:41,490
So copy the submit form.

85
00:04:41,610 --> 00:04:43,790
I'm not going to use all that content.

86
00:04:44,190 --> 00:04:45,290
Don't worry.

87
00:04:45,510 --> 00:04:49,370
And I'm going to paste it right now I'm going to change the attack.

88
00:04:49,700 --> 00:04:57,840
Did this many many times before and it inside a format that just delete everything and say console console

89
00:04:57,840 --> 00:05:03,240
that log and then data to submit real simple.

90
00:05:03,240 --> 00:05:04,590
All right.

91
00:05:04,590 --> 00:05:05,540
We are pretty much done.

92
00:05:05,550 --> 00:05:08,970
So now of course we need to add all the way up for this.

93
00:05:08,970 --> 00:05:10,980
So look at what's happened right now.

94
00:05:11,610 --> 00:05:19,760
So I'm going to go to the main div and say class name of container I can add a to a title to this one

95
00:05:20,340 --> 00:05:22,500
and reset the password.

96
00:05:22,500 --> 00:05:24,990
I know that this is boring but you know it can be.

97
00:05:24,980 --> 00:05:26,780
Can I need to do it.

98
00:05:26,850 --> 00:05:28,690
If not we cannot do anything.

99
00:05:28,750 --> 00:05:33,430
I can just show you with no real environment.

100
00:05:33,600 --> 00:05:35,040
So form.

101
00:05:35,100 --> 00:05:36,700
So now we get a form.

102
00:05:36,720 --> 00:05:38,060
All right.

103
00:05:38,550 --> 00:05:42,130
So instead of here we will add the form field.

104
00:05:42,150 --> 00:05:42,960
Right.

105
00:05:42,960 --> 00:05:43,530
Real simple.

106
00:05:43,530 --> 00:05:48,020
I'm going to copy the form field for email and I'm going to paste it right here.

107
00:05:48,020 --> 00:05:51,170
And now we have an e-mail and we make it better.

108
00:05:51,720 --> 00:05:52,440
All right.

109
00:05:52,740 --> 00:05:59,390
So after the form field the only thing we need is the forms access the form error and the on click.

110
00:05:59,430 --> 00:06:04,090
And they believe we do have this on the on this on this one on the register.

111
00:06:04,170 --> 00:06:07,710
So we don't have the success don't worry to create it.

112
00:06:07,710 --> 00:06:10,240
But I'm going to copy the form error and the button.

113
00:06:10,500 --> 00:06:10,760
Right.

114
00:06:10,770 --> 00:06:13,080
So I'm going to go at the bottom you have a form error.

115
00:06:13,080 --> 00:06:14,590
Please check your data.

116
00:06:14,650 --> 00:06:19,950
Or it could be you know something else and then the button with the submit form which is going to be

117
00:06:19,950 --> 00:06:26,660
sent e-mail e-mail to reset password or whatever.

118
00:06:26,680 --> 00:06:33,780
You know that is completely up to you and the designer that the company hired to do.

119
00:06:33,780 --> 00:06:37,010
Of course all the UXO and everything else.

120
00:06:38,550 --> 00:06:43,420
So now I'm going to do this to form success because we can if needed right here we cannot escape this.

121
00:06:43,590 --> 00:06:48,830
So there's that state that forms success then we're going to show something.

122
00:06:48,840 --> 00:06:51,330
If not you're not going to do anything.

123
00:06:51,330 --> 00:06:54,270
So what we do is just give it just like this one.

124
00:06:54,450 --> 00:07:01,310
So I'm going to copy and I'm going to change instead of our label is going to be form success right.

125
00:07:01,380 --> 00:07:05,160
Just like with it before form success.

126
00:07:05,160 --> 00:07:05,850
All right.

127
00:07:06,270 --> 00:07:15,120
So this one is going to say Don check your e-mail of course in real life you will need to do John.

128
00:07:15,150 --> 00:07:16,400
Check your e-mail.

129
00:07:16,410 --> 00:07:17,570
Never forget.

130
00:07:17,670 --> 00:07:23,270
Never forget to check the spam or the trash directory and you know all that that kind of things.

131
00:07:23,560 --> 00:07:24,090
So OK.

132
00:07:24,150 --> 00:07:27,690
So right now we get this.

133
00:07:27,810 --> 00:07:30,300
Of course if we do something nothing is going to happen.

134
00:07:30,420 --> 00:07:34,030
But you know everything is going to work and we get the validation and everything else.

135
00:07:34,140 --> 00:07:41,060
And if I do an e-mail we should be getting the council log of data to submit.

136
00:07:41,060 --> 00:07:41,610
Right.

137
00:07:41,930 --> 00:07:43,530
And we do Frances and Gmail.

138
00:07:43,540 --> 00:07:44,360
So all right.

139
00:07:44,840 --> 00:07:52,330
So now what we need to do the next step is going to be going to the right here to the form is valid

140
00:07:52,940 --> 00:07:55,520
and we going to make a request to the server.

141
00:07:55,610 --> 00:08:00,500
The server is going to grab the data to submit with the email and it's going to try and find the user

142
00:08:00,930 --> 00:08:01,640
Ryan.

143
00:08:01,820 --> 00:08:09,020
And if it finds a user is going to generate a token generated hash and send the email to a new link

144
00:08:09,260 --> 00:08:16,880
with that hash you know usual stuff of course you already know how this works because this is the way

145
00:08:16,880 --> 00:08:18,710
we do things on web.

146
00:08:18,980 --> 00:08:20,230
So we are going to do that right now.

147
00:08:20,290 --> 00:08:25,970
We need to go to the server and create a run for this and this one is going to be a little bit heavy.

148
00:08:26,270 --> 00:08:34,610
OK so let's go to the user part admin uploads and then I believe we have right here words users are

149
00:08:34,610 --> 00:08:36,400
going to do it right here at the top.

150
00:08:36,410 --> 00:08:39,070
So first we need to relicensed Ellison for this route.

151
00:08:39,080 --> 00:08:42,980
So its app that post and then open and close.

152
00:08:42,980 --> 00:08:51,190
So we are posting because we need to catch an email so API users for Slash and reset user not password

153
00:08:51,200 --> 00:08:52,860
we are resetting the user.

154
00:08:53,080 --> 00:08:58,010
So reset user are then coma open and close.

155
00:08:58,010 --> 00:09:02,260
We don't need to use the middleware of mouth because you know they are not authenticated and that that

156
00:09:02,460 --> 00:09:04,010
that is the whole point.

157
00:09:04,190 --> 00:09:07,280
So response a request and response.

158
00:09:07,280 --> 00:09:07,710
Right.

159
00:09:08,550 --> 00:09:11,600
So instead of here we need to fine the user by email.

160
00:09:11,700 --> 00:09:20,100
So we you go to a user we could do dot then find one opening close and right here we need to tell Mungo

161
00:09:20,640 --> 00:09:23,960
what are we looking for in this case.

162
00:09:23,970 --> 00:09:26,410
We are finding by e-mail.

163
00:09:26,580 --> 00:09:27,230
Right.

164
00:09:27,390 --> 00:09:30,190
And then where is the email inside of the request.

165
00:09:30,390 --> 00:09:33,510
The body dot and then e-mail.

166
00:09:33,790 --> 00:09:35,060
All right.

167
00:09:35,100 --> 00:09:41,930
And then of course we run the callback so Im going to put coma and do the callback.

168
00:09:42,060 --> 00:09:47,620
Now we could get an error or we could get a user.

169
00:09:47,620 --> 00:09:48,200
All right.

170
00:09:48,420 --> 00:09:50,010
So now what do we need to do.

171
00:09:50,130 --> 00:09:56,440
Because we actually this route is getting an email since we are finding an e-mail.

172
00:09:56,520 --> 00:09:59,190
What we need to do we need to go to that user.

173
00:09:59,220 --> 00:10:04,110
You know the owner of that e-mail on that database and create the hash.

174
00:10:04,260 --> 00:10:11,020
We don't have this logic we need to add to the models the new and new parts and you know do all of this.

175
00:10:11,160 --> 00:10:16,620
So are going to do it right now I'm going to go to models and I'm going to go to the user schema.

176
00:10:16,620 --> 00:10:18,510
Now we need to add two more things.

177
00:10:18,540 --> 00:10:24,630
Right now we have the token and the token of course works after we log in or register but now we are

178
00:10:24,630 --> 00:10:28,060
resetting the token we want to reset the password.

179
00:10:28,080 --> 00:10:35,250
So I'm going to put a coma and I'm going to create two new fields reset token and this one is going

180
00:10:35,250 --> 00:10:37,940
to be a type of string just like the token.

181
00:10:38,160 --> 00:10:40,090
And then I'm going to be adding one more.

182
00:10:40,200 --> 00:10:41,440
I could you know skip this.

183
00:10:41,460 --> 00:10:43,880
But again real life you will need to use it.

184
00:10:43,920 --> 00:10:50,860
I'm going to copy this one pasted right here and XP for exploration.

185
00:10:50,890 --> 00:10:53,100
We're going to create a number.

186
00:10:53,100 --> 00:10:56,770
This one has a number and you could use dates.

187
00:10:56,910 --> 00:10:58,870
There are many many ways to do this.

188
00:10:58,880 --> 00:11:00,620
It is going to show you want.

189
00:11:00,690 --> 00:11:07,550
So whenever we create a reset token we need to set that token to expire at one point.

190
00:11:07,680 --> 00:11:13,500
So by doing this and we pass the time stamp whenever we get the request to change the actual past password

191
00:11:13,890 --> 00:11:16,060
even if the token is correct.

192
00:11:16,110 --> 00:11:18,390
We're going to check if it it's expired.

193
00:11:18,420 --> 00:11:23,380
If it is of course we're not going to let the user do anything or get.

194
00:11:23,610 --> 00:11:24,480
So this is good.

195
00:11:24,480 --> 00:11:27,900
Now we have this now what we need to do we need to go.

196
00:11:27,900 --> 00:11:34,650
For example if I go to the server right here we need to you know create the token and store it instead

197
00:11:34,650 --> 00:11:37,260
of the user that we are finding right here.

198
00:11:37,590 --> 00:11:42,020
Now I'm going to create a method just like we did with the reset password.

199
00:11:42,030 --> 00:11:43,680
I'm sorry the general token.

200
00:11:44,040 --> 00:11:46,730
Remember we're going to do very much the same thing right here.

201
00:11:46,830 --> 00:11:53,520
Since we do have a user we are inside of a user begin to enter that user and we to create a new method.

202
00:11:53,580 --> 00:12:00,970
So generate reset and then tokin and this one is going to be a method.

203
00:12:00,990 --> 00:12:01,250
Right.

204
00:12:01,250 --> 00:12:02,820
We can add it in a second.

205
00:12:02,820 --> 00:12:09,740
And of course after we are done we run the request we get the request and we get the you know the I'm

206
00:12:09,760 --> 00:12:13,880
sorry the request the error the error and the user back.

207
00:12:13,980 --> 00:12:15,270
Now we don't have this method.

208
00:12:15,290 --> 00:12:16,460
We're going to add it right now.

209
00:12:16,620 --> 00:12:23,900
Let's go to users and I'm going to go maybe right here at the top.

210
00:12:24,070 --> 00:12:24,320
Why.

211
00:12:24,340 --> 00:12:25,300
Why not.

212
00:12:25,300 --> 00:12:27,400
So just like with it the generate token.

213
00:12:27,580 --> 00:12:33,580
We just need to create a method that is going to created reset tokens just like this is pretty much

214
00:12:33,580 --> 00:12:34,860
the same example.

215
00:12:34,960 --> 00:12:41,850
So user schema methods dot and then generate reset token.

216
00:12:41,970 --> 00:12:42,670
Right.

217
00:12:43,150 --> 00:12:48,770
So again this is going to be a function opening close and at the end we will get a callback.

218
00:12:48,970 --> 00:12:49,850
All right.

219
00:12:50,500 --> 00:12:55,480
So just like with it for I'm going to create var user that is going to be this because of course we

220
00:12:55,480 --> 00:12:56,960
need to modify the user.

221
00:12:57,070 --> 00:13:02,350
Now at the top we're going to go right here at the top and we need to include crypto because we will

222
00:13:02,350 --> 00:13:06,610
generate a hash just like we did with big crypt with WTS.

223
00:13:06,700 --> 00:13:08,210
We need to generate a hash.

224
00:13:08,230 --> 00:13:14,140
And of course put it inside of the users whenever we request that we set token right.

225
00:13:14,160 --> 00:13:16,150
So I to import crypto.

226
00:13:16,180 --> 00:13:23,000
So Konst than crypto that equals require open and closed.

227
00:13:23,140 --> 00:13:25,740
And we bring crypto.

228
00:13:25,840 --> 00:13:27,080
All right.

229
00:13:27,640 --> 00:13:29,770
So I'm going to go copy this.

230
00:13:29,770 --> 00:13:36,320
And if you remember we've already used crypto bringing in the Shah one you know to generate that coding.

231
00:13:36,520 --> 00:13:40,870
So with crypto of course you get other things you get all the things you can do.

232
00:13:41,080 --> 00:13:47,320
And one of the things you can do is you can of course generate a random byte.

233
00:13:47,440 --> 00:13:49,630
Let me just show you random bytes.

234
00:13:49,660 --> 00:13:53,170
So with this one of course it will generate a random string.

235
00:13:53,200 --> 00:13:55,130
How many 20 how many characters.

236
00:13:55,140 --> 00:13:56,820
20 then it coma.

237
00:13:57,040 --> 00:13:59,810
Then function opening close.

238
00:13:59,980 --> 00:14:08,800
And this one will get will return with an error and the buffer just like this and open and close.

239
00:14:08,800 --> 00:14:11,540
Now this buffer is going to be the random thing.

240
00:14:11,800 --> 00:14:19,610
But I'm going to say bar tokin equals buffer and remember that we store it to a string.

241
00:14:19,630 --> 00:14:26,490
So we're going to do that than to string and we say hex right.

242
00:14:26,990 --> 00:14:27,620
OK.

243
00:14:28,010 --> 00:14:34,510
Now I'm going to do that dates after we store the token because it's a little bit confusing confusing

244
00:14:34,510 --> 00:14:36,240
but you know so.

245
00:14:36,250 --> 00:14:43,390
OK so since we are inside the user X one we get to talk once we get the token to access the user access

246
00:14:43,440 --> 00:14:43,870
method.

247
00:14:43,930 --> 00:14:47,690
We added a reset token of course and a copy.

248
00:14:47,710 --> 00:14:53,890
And I'm going to say OK so now the reset token has a token and it's equal to the token we are generating

249
00:14:54,190 --> 00:14:55,450
with random bytes.

250
00:14:55,510 --> 00:14:57,160
Right just like with it before.

251
00:14:57,160 --> 00:15:02,860
Now once we get the token we need to graph the user we need to save it and then we need to of course

252
00:15:02,860 --> 00:15:04,950
run the callback function.

253
00:15:04,960 --> 00:15:10,690
Now the callback function contains the error and the user with all the changes.

254
00:15:10,690 --> 00:15:13,080
Now again we can already did this.

255
00:15:13,090 --> 00:15:16,420
So I'm going to copy paste if we get an error.

256
00:15:16,450 --> 00:15:17,950
We return that callback.

257
00:15:17,950 --> 00:15:20,950
We are passing right here that function with the error.

258
00:15:20,950 --> 00:15:26,820
If not we are just you know moving forward and passing the user resample.

259
00:15:26,830 --> 00:15:33,850
OK so now we need to go back to the server because this January reset token will be returning a user.

260
00:15:33,850 --> 00:15:35,560
So let's go back to the server.

261
00:15:35,740 --> 00:15:36,500
Right.

262
00:15:36,670 --> 00:15:37,000
Right.

263
00:15:37,000 --> 00:15:37,660
On the server.

264
00:15:37,660 --> 00:15:40,410
Let me find a route.

265
00:15:40,510 --> 00:15:41,190
I just moved it.

266
00:15:41,230 --> 00:15:42,730
OK reset user.

267
00:15:42,730 --> 00:15:42,970
All right.

268
00:15:42,990 --> 00:15:48,150
So we going to get back from generate reset token with an error and an actual user.

269
00:15:48,400 --> 00:15:55,900
So are going to say if I open and close if we do have an error we will return something with a response

270
00:15:56,110 --> 00:16:01,790
with a Jaison sign and then success with false and then the actual error.

271
00:16:01,960 --> 00:16:03,290
Same was always.

272
00:16:03,630 --> 00:16:05,260
Now then we get to send in e-mail.

273
00:16:05,260 --> 00:16:09,900
But first I wouldn't want to check if we are getting a token before doing anything else.

274
00:16:10,090 --> 00:16:11,680
So I'm going to send a J.

275
00:16:11,710 --> 00:16:17,200
Jason responds and say return responds not Jaison.

276
00:16:17,380 --> 00:16:22,960
That opening close and it's pretty much the same thing than this but the opposite of course going to

277
00:16:22,960 --> 00:16:24,370
delete the error.

278
00:16:25,210 --> 00:16:27,760
And then of course change it to true.

279
00:16:27,760 --> 00:16:28,280
All right.

280
00:16:30,730 --> 00:16:31,280
All right.

281
00:16:31,420 --> 00:16:33,170
So everything is good.

282
00:16:33,260 --> 00:16:36,470
So now of course we make a request we pass the e-mail.

283
00:16:36,530 --> 00:16:41,700
If we are finding the e-mail we go to the method we store the token.

284
00:16:41,840 --> 00:16:48,180
And when we get the we save the we save the user we go back and we send that response pretty clear right.

285
00:16:48,350 --> 00:16:51,510
So let's let's just add and maybe the you know the selector.

286
00:16:51,530 --> 00:16:53,020
Yeah I went to a little bit long.

287
00:16:53,150 --> 00:16:56,030
So let's go to the next one and we're going to test it of course.

288
00:16:56,210 --> 00:16:57,540
And how can we test it.

289
00:16:57,590 --> 00:16:57,840
OK.

290
00:16:57,860 --> 00:17:01,730
Well we need to go to the index and create you know make that request from Pierre.

