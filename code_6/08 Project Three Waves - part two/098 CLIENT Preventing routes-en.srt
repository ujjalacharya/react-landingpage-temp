1
00:00:01,090 --> 00:00:04,940
OK so let's do the pre-event route right here.

2
00:00:04,940 --> 00:00:05,900
So I'm going to go right here.

3
00:00:05,910 --> 00:00:10,520
And if you remember the previous component of the previous project we did.

4
00:00:10,560 --> 00:00:14,390
We created a dedicated component instead of showing a route.

5
00:00:14,400 --> 00:00:19,140
So now we're going to do something else we can agree to a high or the component begin to render that

6
00:00:19,170 --> 00:00:24,870
high or other component and that high or the component is going to be in charge of taking whatever component

7
00:00:24,900 --> 00:00:26,640
we want to render in that route.

8
00:00:26,670 --> 00:00:31,230
And of course do some checking and check if the user should enter or not.

9
00:00:31,230 --> 00:00:31,830
All right.

10
00:00:31,950 --> 00:00:33,050
So let's go.

11
00:00:33,050 --> 00:00:36,270
I'm going to go a little bit slow because it's a little bit weird.

12
00:00:36,570 --> 00:00:42,690
So I'm going to create a file inside H O C called out and I'm going to leave this empty and I'm going

13
00:00:42,690 --> 00:00:44,040
to go back to routes.

14
00:00:44,250 --> 00:00:52,230
Of course we need to import it so import and I'm going to call it out from that forward slash h o c

15
00:00:52,240 --> 00:00:56,910
forward slash and then it's going to be called out.

16
00:00:57,060 --> 00:00:57,570
Right.

17
00:00:57,600 --> 00:00:59,040
I mean a mistake right here.

18
00:00:59,040 --> 00:01:00,460
There you go h o c.

19
00:01:00,630 --> 00:01:01,550
And then out.

20
00:01:01,920 --> 00:01:08,590
So now instead of rendering this component begin to be render rendering that out component instead.

21
00:01:08,940 --> 00:01:12,330
And of course we need to do this on all the routes.

22
00:01:12,330 --> 00:01:13,510
So we're going to do this.

23
00:01:13,620 --> 00:01:15,660
I'm going to do this and I'm going to do this.

24
00:01:15,720 --> 00:01:17,790
And then of course I'm going to close it.

25
00:01:17,850 --> 00:01:18,390
All right.

26
00:01:18,460 --> 00:01:19,340
OK.

27
00:01:20,160 --> 00:01:26,030
So now whenever we render a route this route for example instead of rendering this component is going

28
00:01:26,030 --> 00:01:27,250
ever or out.

29
00:01:27,540 --> 00:01:33,250
Now of course we need to do more things because if we think about this this route it's public.

30
00:01:33,330 --> 00:01:35,160
This ones are kind of in between.

31
00:01:35,160 --> 00:01:39,870
They are not really public but if the users log then we shouldn't let the user end.

32
00:01:39,990 --> 00:01:45,990
We should show the user the dashboard in of course if the user is logged in it's going to be a complete

33
00:01:46,020 --> 00:01:47,020
private drought.

34
00:01:47,100 --> 00:01:49,600
So I'm going to create a second argument for this.

35
00:01:49,620 --> 00:01:54,340
So for complete private routes this one is going to be true.

36
00:01:54,780 --> 00:01:57,210
And for kind of the in between.

37
00:01:57,270 --> 00:02:02,140
This was going to be false just like this false coma and false.

38
00:02:02,280 --> 00:02:06,710
And for the other ones the completely public it's going to be nil.

39
00:02:07,140 --> 00:02:12,420
All right then we have one more scenario which is going to be of course is going to fail is going to

40
00:02:12,420 --> 00:02:15,390
be the if the user is in a trader.

41
00:02:15,510 --> 00:02:19,300
And for this one for that for those routes we will add a third argument.

42
00:02:19,440 --> 00:02:20,820
But we don't have this route.

43
00:02:20,840 --> 00:02:23,260
We will create the logic but we're going to do it later.

44
00:02:23,280 --> 00:02:24,640
And I can explain why you're going to get.

45
00:02:24,640 --> 00:02:25,410
Don't worry.

46
00:02:25,740 --> 00:02:27,670
So right now we are rendering this out.

47
00:02:27,690 --> 00:02:31,080
But of course we the application fails because this one does nothing.

48
00:02:31,080 --> 00:02:31,570
All right.

49
00:02:31,740 --> 00:02:37,520
So let's go to the other component and we need to create a re-act class based component.

50
00:02:37,520 --> 00:02:38,270
All right.

51
00:02:38,400 --> 00:02:45,920
So this one will be called authentication check of Fenty cation and check.

52
00:02:45,990 --> 00:02:48,690
You could call this whenever you want.

53
00:02:48,690 --> 00:02:50,660
Just going to call it this way.

54
00:02:50,730 --> 00:02:52,990
Now we need to import quite a few things.

55
00:02:53,150 --> 00:02:59,560
We're going to use connect from redux because we will dispatch an action to fetch from the server.

56
00:02:59,820 --> 00:03:07,560
This whatever the outcome returns and if you look at this the hour will be returning all the information

57
00:03:07,560 --> 00:03:11,580
about the user included if it's been or is out indicate it.

58
00:03:11,580 --> 00:03:12,180
All right.

59
00:03:12,330 --> 00:03:13,680
So we need to import connect.

60
00:03:13,680 --> 00:03:14,710
That's the first thing.

61
00:03:14,910 --> 00:03:24,100
So import connect connect there or go from react redux.

62
00:03:24,120 --> 00:03:24,730
All right.

63
00:03:24,780 --> 00:03:27,700
Then of course we need to import something from user actions.

64
00:03:27,750 --> 00:03:30,400
We don't have it but we're going to read it right now.

65
00:03:30,480 --> 00:03:37,910
So we get to port and then we import the South from that that forward slash.

66
00:03:38,040 --> 00:03:41,910
We go inside actions and then user actions.

67
00:03:42,210 --> 00:03:44,040
Now we will show a loader.

68
00:03:44,130 --> 00:03:49,140
If we are you know fetching the information about the user or deciding if you want to let the user in

69
00:03:49,140 --> 00:03:50,290
or out.

70
00:03:50,400 --> 00:03:51,010
Sorry.

71
00:03:51,040 --> 00:03:56,960
So I'm going to import circular circular and then progress.

72
00:03:56,970 --> 00:03:58,230
Sorry for that.

73
00:03:58,810 --> 00:03:59,700
I was.

74
00:03:59,820 --> 00:04:02,150
I had a cold.

75
00:04:03,200 --> 00:04:05,710
We could go maybe more not.

76
00:04:05,760 --> 00:04:11,750
I'm not completely recovered but I'm you know can it get so much much better.

77
00:04:11,760 --> 00:04:14,640
So I mean porting circular progress.

78
00:04:14,670 --> 00:04:20,070
So if the user of course is not authenticated and we're still doing some checking instead of showing

79
00:04:20,070 --> 00:04:25,350
whatever component we want to show I'm going to show it's circle or progress and after and only after

80
00:04:25,350 --> 00:04:32,070
we do the authentication check begin to render the component and remove the progress bar progress.

81
00:04:32,070 --> 00:04:38,940
Now what are we going to be returning calls a composed class I can post component kind of weird name

82
00:04:38,970 --> 00:04:39,990
but that's the name.

83
00:04:40,110 --> 00:04:43,070
It's a component components composed component.

84
00:04:43,080 --> 00:04:48,780
So we are going to be returning a function that returns a class.

85
00:04:48,780 --> 00:04:55,020
So it's a function that returns a function pretty much that that is the idea of all this.

86
00:04:55,080 --> 00:05:01,970
So I'm going to go right here and create an export a default and a function of returning a function

87
00:05:01,970 --> 00:05:06,130
just a normal function and this function will be returning some code.

88
00:05:06,290 --> 00:05:07,090
Right.

89
00:05:07,100 --> 00:05:13,400
So the code that we will be returning is the complete code of the class that we want to return.

90
00:05:13,400 --> 00:05:14,390
Simple as that.

91
00:05:14,390 --> 00:05:14,840
All right.

92
00:05:15,730 --> 00:05:18,990
So I'm going to go right here to the export before at the top.

93
00:05:19,270 --> 00:05:25,000
So this function will be receiving some arguments because we are passing arguments right here.

94
00:05:25,210 --> 00:05:29,210
The first one is the component that we want to render at the end.

95
00:05:29,290 --> 00:05:30,740
If everything goes OK.

96
00:05:30,850 --> 00:05:35,450
So this one it's a composed class just like this.

97
00:05:35,450 --> 00:05:39,890
Then it's coma and we have the second argument which is the true falls of the null.

98
00:05:39,970 --> 00:05:46,480
So on this one I'm going to say I'm going to call it reload and then we have a third argument that we

99
00:05:46,480 --> 00:05:50,020
are not passing right here that we can use it in the future.

100
00:05:50,140 --> 00:05:55,070
So I'm going to call this main route because this one it's only for adding routes.

101
00:05:55,210 --> 00:06:02,650
Now since we don't have on other routes this argument the third argument going to set by default to

102
00:06:02,650 --> 00:06:04,750
null so we can do this.

103
00:06:04,780 --> 00:06:07,130
And with ESX.

104
00:06:07,210 --> 00:06:14,420
All right let's get so now of course we enter this function and this function returns this class since

105
00:06:14,420 --> 00:06:18,220
we're going to be using Kinect instead of exporting default.

106
00:06:18,230 --> 00:06:19,550
The indication check.

107
00:06:19,570 --> 00:06:23,240
Let me just change the name here instead of returning this.

108
00:06:23,240 --> 00:06:24,860
We need to return connect.

109
00:06:25,010 --> 00:06:33,780
So we say return just like this connect and notice that we are not doing the export default because

110
00:06:33,800 --> 00:06:38,300
this is the export default we can only have one export default per file.

111
00:06:38,750 --> 00:06:40,720
So if we do it the connect.

112
00:06:40,730 --> 00:06:42,130
And of course open it close.

113
00:06:42,260 --> 00:06:45,020
And what we return is the indication check.

114
00:06:45,260 --> 00:06:53,420
Right now we need to use a redux and we will use map state to props and the props that we will be accessing.

115
00:06:53,420 --> 00:06:55,370
Accessing is the user process.

116
00:06:55,490 --> 00:07:05,630
So I'm going to go over here create a function function then I'm going to say map state to props and

117
00:07:05,630 --> 00:07:07,830
this is of course from redux.

118
00:07:07,850 --> 00:07:10,160
So in this function what we will get we will get.

119
00:07:10,160 --> 00:07:14,500
Of course we'll pass the state and then what we will be returning is the user.

120
00:07:14,510 --> 00:07:21,380
So return open and close and we say that we want to return the user and inside of the user whatever

121
00:07:21,380 --> 00:07:25,470
we get onstage that user and we will use this later.

122
00:07:25,730 --> 00:07:31,040
So whenever we use connect and we are using maps data props from redux we need to pass it as a first

123
00:07:31,100 --> 00:07:31,910
argument.

124
00:07:32,030 --> 00:07:36,280
You have a second one which is map this patched props that goes on the second one.

125
00:07:36,350 --> 00:07:38,680
But if you don't put it it doesn't matter.

126
00:07:38,720 --> 00:07:39,610
Right.

127
00:07:40,210 --> 00:07:42,860
But always map state prompts is the first argument.

128
00:07:42,860 --> 00:07:46,830
The second one this patch we are not really going to use at this point right here.

129
00:07:46,880 --> 00:07:50,300
We will dispatch something but on a different way just like with it before.

130
00:07:50,640 --> 00:07:51,630
It's OK.

131
00:07:52,220 --> 00:07:57,010
So I'm going to go right here inside of the to the render and I'm going to say OK.

132
00:07:57,290 --> 00:08:04,250
So if I do have to have a result right I'm going to show the compost class.

133
00:08:04,250 --> 00:08:06,030
You know the class we want to return.

134
00:08:06,110 --> 00:08:08,940
If not I want to return the loader.

135
00:08:09,020 --> 00:08:09,410
All right.

136
00:08:09,650 --> 00:08:14,470
So first I'm going to need to state and I'm going to say state equals to opening close and I'm going

137
00:08:14,480 --> 00:08:18,160
to say loading equals to true.

138
00:08:18,450 --> 00:08:18,710
Right.

139
00:08:18,700 --> 00:08:22,050
By default we are loading something we are doing some checking.

140
00:08:22,130 --> 00:08:27,590
So at the bottom instead of returning the component that we want to return at the end are going to do

141
00:08:27,590 --> 00:08:28,600
some checking first.

142
00:08:28,640 --> 00:08:37,370
I going to say if open it close and it's outside of the return if that does not state that loading it's

143
00:08:37,370 --> 00:08:41,770
true instead of returning this we're going to return something else.

144
00:08:41,780 --> 00:08:50,950
So we need to use the keyword return and I'm going to return a div with a call a last name of main loader

145
00:08:51,410 --> 00:08:54,450
at inside and then to use this circular progress.

146
00:08:54,500 --> 00:08:59,770
So opening close circle or progress if you remember we can pass some props.

147
00:08:59,870 --> 00:09:01,950
So I'm going to change the style a little bit.

148
00:09:02,180 --> 00:09:15,200
So open it close open it close and the color can be 2 1 9 6 EF 3 and I'm going to change that thickness.

149
00:09:15,200 --> 00:09:19,710
So thickness equals two pretty large.

150
00:09:19,880 --> 00:09:20,530
Pretty big.

151
00:09:20,740 --> 00:09:22,320
Seven.

152
00:09:22,480 --> 00:09:27,630
Now of course if everything goes OK at the end you know we return the components.

153
00:09:27,940 --> 00:09:29,770
So we're going to get back.

154
00:09:29,950 --> 00:09:35,890
So let's go to our application and at least it's not failing but we have the loader and this means that

155
00:09:35,950 --> 00:09:39,400
of course says we are not changing the state.

156
00:09:39,490 --> 00:09:42,300
It goes right here to this scenario.

157
00:09:42,460 --> 00:09:50,450
So before we go to any any any any route and to go to a different one we're always going to lower.

158
00:09:50,830 --> 00:09:56,320
So this in this way First we can do something right here maybe in the component amount.

159
00:09:56,440 --> 00:10:01,840
And until we don't get an answer from the server telling telling us if this user gets authenticated

160
00:10:02,170 --> 00:10:03,730
nothing is going to get this plate.

161
00:10:03,730 --> 00:10:08,510
So are we always first do the checking and then we show the component.

162
00:10:08,530 --> 00:10:09,290
Right.

163
00:10:09,820 --> 00:10:15,020
So of course if everything goes OK we want to return the component.

164
00:10:15,130 --> 00:10:19,410
Now which components are we going to be returning the composed class.

165
00:10:19,630 --> 00:10:21,380
So this first argument.

166
00:10:21,610 --> 00:10:29,480
It's equal to whatever component we want to render whatever we specify right here since we kind of pass

167
00:10:29,490 --> 00:10:34,110
the first argument we are kind of rename in the name of the argument.

168
00:10:34,180 --> 00:10:36,920
We can do something like this instead of returning there.

169
00:10:37,120 --> 00:10:40,100
I just can return that compost class.

170
00:10:40,660 --> 00:10:42,930
So now if I changed this to false

171
00:10:45,790 --> 00:10:50,330
you're going to be returning the compost class and this case is home.

172
00:10:50,720 --> 00:10:51,140
Right.

173
00:10:51,180 --> 00:10:51,950
OK.

174
00:10:52,730 --> 00:10:57,710
So let me go to the user dashboard because it's one we need right now.

175
00:10:57,710 --> 00:11:00,370
So you really was user dashboard.

176
00:11:00,380 --> 00:11:01,400
So we get that dashboard.

177
00:11:01,410 --> 00:11:03,390
We're getting the actual component.

178
00:11:03,410 --> 00:11:08,530
Of course we are not doing any checking or going to change this to true back to true now.

179
00:11:08,600 --> 00:11:12,490
And of course the router and everything else they pass prompts.

180
00:11:12,620 --> 00:11:14,300
So we're going to do open and close.

181
00:11:14,420 --> 00:11:17,430
Dot dot dot this dot props.

182
00:11:17,570 --> 00:11:20,950
So we're going to include all the props from the router now.

183
00:11:21,010 --> 00:11:26,890
Then at the end at the very very end when we do the we do that request to the user.

184
00:11:26,990 --> 00:11:32,660
We will get some data back that will be stored inside redux with the map state two props.

185
00:11:32,690 --> 00:11:39,750
So inside of this component we will have access to whatever is inside the user in redux.

186
00:11:40,140 --> 00:11:44,900
And we could need this in the future so I'm going to say user and much later we're going to check it

187
00:11:45,420 --> 00:11:51,440
so I can include whatever we get back from the server whatever we get back from redux that we have inside

188
00:11:51,440 --> 00:11:54,090
this that props that user.

189
00:11:54,800 --> 00:11:55,940
All right.

190
00:11:55,940 --> 00:11:58,200
So for now of course nothing is going to happen.

191
00:11:58,220 --> 00:11:59,880
We just have the same result.

192
00:12:00,080 --> 00:12:00,970
All right.

193
00:12:01,460 --> 00:12:03,600
So what do we need to do next.

194
00:12:03,650 --> 00:12:08,610
We need to make a request to the server and get this hour's going on.

195
00:12:08,840 --> 00:12:11,620
So we're going to do this on the component demand component.

196
00:12:11,630 --> 00:12:13,770
Did MT open in close.

197
00:12:14,180 --> 00:12:18,440
So what we need to do we need to dispatch an action to oath.

198
00:12:18,440 --> 00:12:20,390
Now we don't have anything inside out.

199
00:12:20,540 --> 00:12:25,860
So I'm going to go to user actions and we can have a you know need to add it.

200
00:12:25,920 --> 00:12:31,490
So at the top I'm going to call this user our core user.

201
00:12:31,970 --> 00:12:42,550
So this our user will be just a function so we'll go at the bottom and say export export function call

202
00:12:42,920 --> 00:12:44,740
out the user how we're going to call it.

203
00:12:44,890 --> 00:12:46,270
There we go.

204
00:12:47,210 --> 00:12:56,080
So this one just creates a request to add that to the server so Konst request equals ASIO's that get.

205
00:12:56,080 --> 00:13:03,810
And remember it's a get request to user data server just like this and close that.

206
00:13:03,980 --> 00:13:07,650
And then for Slash if you remember the route it's out.

207
00:13:07,910 --> 00:13:08,640
All right.

208
00:13:08,720 --> 00:13:10,620
Then of course we get a response.

209
00:13:10,670 --> 00:13:20,960
So we say then we get a response from the server that it's equal to response that data the data and

210
00:13:20,960 --> 00:13:28,670
at the end we will be returning opening close and a type of and a payload is what we get back from the

211
00:13:28,670 --> 00:13:29,320
server.

212
00:13:29,570 --> 00:13:35,780
Now the time just like we get right here it's going to be out user and the payload whatever we get back

213
00:13:35,780 --> 00:13:37,370
from the request.

214
00:13:37,430 --> 00:13:38,470
Right OK.

215
00:13:38,870 --> 00:13:42,980
Now we need to add the type of our user types.

216
00:13:43,040 --> 00:13:54,520
So export Konst out user equals our user user right.

217
00:13:54,640 --> 00:13:59,560
So now we have the actions we have the types we need to create the user reducer.

218
00:14:00,020 --> 00:14:06,600
So on the user user again we will be getting this alpha type so our user.

219
00:14:06,850 --> 00:14:11,990
And he said here you're going to do it at the bottom it's going to be a case of our user.

220
00:14:12,170 --> 00:14:19,050
And whenever we get a return we will re re payload we will be getting the state returning the state

221
00:14:19,580 --> 00:14:25,670
and I'm going to call it user data because if you remember from the server whenever we get a response

222
00:14:26,200 --> 00:14:29,540
it's with all pretty much all the user data.

223
00:14:29,550 --> 00:14:30,270
All right.

224
00:14:30,650 --> 00:14:34,630
So there's one action that payload.

225
00:14:34,630 --> 00:14:35,370
All right.

226
00:14:36,600 --> 00:14:37,350
You're get.

227
00:14:37,610 --> 00:14:43,610
So let's go to back to south and now we can you know dispatch in action and see what we get.

228
00:14:43,610 --> 00:14:47,470
So I'm going to go to our I'm going to say OK.

229
00:14:47,600 --> 00:14:55,440
I want to add this that props props Dodd this.

230
00:14:56,660 --> 00:15:02,980
Opening close you're going to be doing an hour and then of course we will get a response.

231
00:15:03,260 --> 00:15:11,450
So I'm going to say response opening close and I'm not going to do this now I'm going to host the response

232
00:15:11,570 --> 00:15:12,250
inside.

233
00:15:12,410 --> 00:15:21,020
Let the user and again say this equals to this that props.

234
00:15:21,290 --> 00:15:27,440
And now notice I'm not using this that this a response that this patch I'm using this that props because

235
00:15:27,610 --> 00:15:33,370
when we read when we reach here that this patch already injected the props with the map state the props.

236
00:15:33,470 --> 00:15:40,640
So now I can make a bigger check to this that props that user because after we get a response from the

237
00:15:40,740 --> 00:15:44,730
promise everything is should be there from redux.

238
00:15:44,810 --> 00:15:52,970
So I'm going to access user data and I'm going to console log user and see what we get are.

239
00:15:53,200 --> 00:15:56,320
So I'm going to go right here and of course nothing happens.

240
00:15:56,440 --> 00:16:02,990
I can open the console and I'm going to go to console and we get an object with error.

241
00:16:02,990 --> 00:16:05,210
True and it's all false.

242
00:16:05,240 --> 00:16:08,820
And remember that when we go to the server.

243
00:16:09,440 --> 00:16:16,750
This one right here and we go to that middleware which is south we get is out false and error true.

244
00:16:16,850 --> 00:16:24,500
If the user is not authenticated and this is because we are going to the application right here at our

245
00:16:24,500 --> 00:16:29,690
server it's checking for the cookies and it's checking this user it's really authenticated and maybe

246
00:16:29,690 --> 00:16:31,400
the health and education is failing.

247
00:16:31,610 --> 00:16:34,460
So OK so let's try to go to do the following.

248
00:16:34,490 --> 00:16:40,550
I'm going to go back to out again and change this to loading falls

249
00:16:44,830 --> 00:16:50,320
and it pretty much doesn't matter where we go because we are still getting that authentication fails

250
00:16:50,320 --> 00:16:51,990
so we're going to go to council lock.

251
00:16:52,150 --> 00:16:54,670
Let me show it again reload again.

252
00:16:56,100 --> 00:16:58,130
So we get is outfalls and are true.

253
00:16:58,130 --> 00:16:58,570
All right.

254
00:16:58,740 --> 00:17:00,060
So let's go to the log in.

255
00:17:00,150 --> 00:17:01,690
I'm going to go to sign in.

256
00:17:01,710 --> 00:17:03,980
I really will sign in.

257
00:17:04,350 --> 00:17:06,780
I'm not really sure how but it's at the top.

258
00:17:06,780 --> 00:17:08,700
I'm going along here.

259
00:17:08,760 --> 00:17:09,820
So we're just along.

260
00:17:09,840 --> 00:17:10,170
All right.

261
00:17:10,170 --> 00:17:11,140
Sorry for that.

262
00:17:11,550 --> 00:17:16,120
So we're just log in and I'm going to log in again.

263
00:17:16,320 --> 00:17:20,100
Francis LGM of that come and passport.

264
00:17:20,100 --> 00:17:21,140
One two three.

265
00:17:21,310 --> 00:17:22,560
I'm going to log in.

266
00:17:22,560 --> 00:17:25,920
And now we get something something else we get log success.

267
00:17:25,920 --> 00:17:26,470
True.

268
00:17:26,640 --> 00:17:28,290
And it's outman true.

269
00:17:28,410 --> 00:17:30,640
And we have all the information about the user.

270
00:17:30,780 --> 00:17:34,680
So in theory if I reload the application this hour.

271
00:17:34,740 --> 00:17:40,710
And of course we are logging in and we are getting it getting a correct token right here we D-W out

272
00:17:41,280 --> 00:17:47,670
if I reload the application is going to answer to this scenario is going to go and check if we do have

273
00:17:47,670 --> 00:17:50,010
a valid valid token.

274
00:17:50,100 --> 00:17:54,590
And since we do we are going to get this instead of is our pulse.

275
00:17:54,600 --> 00:17:58,750
So I reload the application and we're getting OK.

276
00:17:58,770 --> 00:18:00,940
This dude has to correct token.

277
00:18:00,990 --> 00:18:03,890
So we should be letting the user pass.

278
00:18:03,930 --> 00:18:04,980
So this is it.

279
00:18:05,040 --> 00:18:07,390
Now of course we need to do some more checking.

280
00:18:07,930 --> 00:18:09,630
It's going to go right here.

281
00:18:09,810 --> 00:18:20,330
And of course at the end of this that sets date open and close and I'm going to say loading false and

282
00:18:20,600 --> 00:18:24,530
right here going to say loading true.

283
00:18:24,620 --> 00:18:28,600
Now of course now we do have user information.

284
00:18:28,640 --> 00:18:33,220
So what we need to do we need to check if the user is antiquated.

285
00:18:33,560 --> 00:18:34,100
Right.

286
00:18:34,100 --> 00:18:35,660
Let me do it again the consul law

287
00:18:38,970 --> 00:18:41,480
because I want to show you something of course relevant.

288
00:18:42,000 --> 00:18:45,960
So the application loads that we go to a route and we get this in return.

289
00:18:45,960 --> 00:18:46,490
Right.

290
00:18:46,620 --> 00:18:47,670
So now what do we need to do.

291
00:18:47,670 --> 00:18:50,930
We need to check if the user is authenticated.

292
00:18:50,970 --> 00:18:57,270
We need to check if we do have a prop inside user and user data that it's our equal to true because

293
00:18:57,270 --> 00:19:03,620
if we don't we want to kick the user out and we will never reach this place the loading falls.

294
00:19:03,780 --> 00:19:04,470
All right.

295
00:19:05,810 --> 00:19:10,770
So I'm going to go I'm going to leave that one and I can say OK if opening close.

296
00:19:10,790 --> 00:19:19,470
So if the user remember we have a user right here Dot is off then we're going to do something.

297
00:19:19,760 --> 00:19:22,270
If not we're going to do something else.

298
00:19:22,400 --> 00:19:28,570
Now I'm going to go right here and I'm going to say if I open it close and then reload.

299
00:19:28,910 --> 00:19:30,210
We want to do something.

300
00:19:30,210 --> 00:19:34,670
Now remember that this reload is going to be true false or no.

301
00:19:34,670 --> 00:19:42,470
So if this element here if we are not a decade it and this route that we are trying to enter it is a

302
00:19:42,470 --> 00:19:49,300
complete private route instead of going to the dashboard because the user is not authenticated at all.

303
00:19:49,310 --> 00:19:57,200
We want to say this that prompts that history that push and I want to get the user back to register

304
00:19:57,200 --> 00:20:00,040
or log in register log in.

305
00:20:00,050 --> 00:20:07,080
All right so since we are authenticated Of course it's letting us pass.

306
00:20:07,130 --> 00:20:10,730
What happens if I remove the token going to go right here.

307
00:20:10,730 --> 00:20:16,100
Remove the token I'm going to remove all tokens whatever I can to reload the application.

308
00:20:16,100 --> 00:20:19,430
And since we are not authenticated we get to go back to just to log in.

309
00:20:19,430 --> 00:20:21,200
So you know it's working.

310
00:20:21,200 --> 00:20:22,140
All right.

311
00:20:22,270 --> 00:20:29,660
I got to log in again you are going to looking at why not then password one two three.

312
00:20:29,900 --> 00:20:35,130
And of course we go we go to dashboard reload everything is good.

313
00:20:35,230 --> 00:20:35,790
All right.

314
00:20:35,950 --> 00:20:41,440
Now we have a different scenario because if the user is it is authenticated it's actually authenticated.

315
00:20:41,590 --> 00:20:42,670
What are we going to be doing.

316
00:20:42,670 --> 00:20:44,460
We're going to let the user pass or not.

317
00:20:44,620 --> 00:20:52,740
Well if opening close if we do have a reload remember that we do have a reload if they reload.

318
00:20:52,750 --> 00:20:54,870
It's equal to false.

319
00:20:54,870 --> 00:20:55,290
Right.

320
00:20:55,330 --> 00:20:56,850
Which is right here.

321
00:20:57,070 --> 00:21:03,940
And the user it is often dictated instead of showing the register and log in because we shouldn't show

322
00:21:03,940 --> 00:21:08,620
this route to the user if it's logged then we should go to the dashboard.

323
00:21:08,820 --> 00:21:09,390
So OK.

324
00:21:09,550 --> 00:21:16,070
So if the reload which is the opposite of here it's equal to false just like this.

325
00:21:16,120 --> 00:21:18,920
I'm going to say OK this probs.

326
00:21:18,960 --> 00:21:20,770
Am I'm going to copy from here.

327
00:21:21,060 --> 00:21:27,250
There's that probs that history push and instead of you know letting the user pass to their routes they

328
00:21:27,700 --> 00:21:30,390
register a log in since they are already logged in.

329
00:21:30,400 --> 00:21:33,000
Again it push the user to the dashboard.

330
00:21:33,100 --> 00:21:33,450
Right.

331
00:21:33,460 --> 00:21:37,990
So user for Slash dash board.

332
00:21:38,590 --> 00:21:39,050
All right.

333
00:21:39,120 --> 00:21:40,130
Well let's try again.

334
00:21:40,600 --> 00:21:42,220
Let me make this a little bit smaller.

335
00:21:42,340 --> 00:21:49,210
Now of course the users Longden and I'm going to calls it says that your users are actually logged in

336
00:21:49,210 --> 00:21:50,080
right here.

337
00:21:50,080 --> 00:21:54,740
So if I go to read just so Lagann shouldn't be able to enter.

338
00:21:54,760 --> 00:21:56,140
So nothing happens.

339
00:21:56,140 --> 00:21:58,970
I go to her just to log in and nothing happening.

340
00:21:59,290 --> 00:22:00,680
Register log in.

341
00:22:00,860 --> 00:22:04,070
Enter now happening because we are already logged in.

342
00:22:04,120 --> 00:22:07,580
So it's taking this back to use your user dashboard.

343
00:22:07,690 --> 00:22:14,920
Now later we can begin to get this admin route logic with a third parent with a third argument.

344
00:22:14,920 --> 00:22:21,450
So we need to catch it right here and I'm going to say if I open and close and then we get we going

345
00:22:21,460 --> 00:22:26,150
to get an else and the else will get on the.

346
00:22:26,260 --> 00:22:28,120
That's all right.

347
00:22:28,120 --> 00:22:34,420
Now if the user is out antiquated because at this point we are authenticated and the user is not anatman

348
00:22:34,890 --> 00:22:35,190
right.

349
00:22:35,200 --> 00:22:36,700
It's not an administrator.

350
00:22:36,850 --> 00:22:41,060
Instead of showing the route I'm going to send the user back to the dashboard.

351
00:22:41,140 --> 00:22:46,590
So I'm going to say if this is an app en route and remember we have it right here.

352
00:22:46,750 --> 00:22:53,170
So this property this argument should be true in order to access here.

353
00:22:53,200 --> 00:23:04,230
So if it's an app on route and the user user and say user dot is and I've been Strader is apin begin

354
00:23:04,270 --> 00:23:05,750
to do something else.

355
00:23:05,920 --> 00:23:11,740
Remember that we have right here the property whenever it comes back from the server console.

356
00:23:12,520 --> 00:23:17,280
We have as admin in this case this user is an out Binny's trader.

357
00:23:17,620 --> 00:23:18,280
All right.

358
00:23:18,700 --> 00:23:26,880
So I'm going to say this that prompts that user that dashboard begin to kick these again to dashboard.

359
00:23:27,190 --> 00:23:33,160
So if the user it's an administrator I'm sorry it's not an administrator and it's trying to enter an

360
00:23:33,160 --> 00:23:34,030
have been route.

361
00:23:34,120 --> 00:23:38,500
We are not going to let the user pass which is going to kick the user back to dashboard because you

362
00:23:38,500 --> 00:23:41,540
know they are they are allowed right there.

363
00:23:41,860 --> 00:23:45,740
And that is it works.

364
00:23:45,850 --> 00:23:48,680
So let's try the possible scenarios.

365
00:23:49,210 --> 00:23:50,850
I'm trying to I'm locked in.

366
00:23:50,860 --> 00:23:51,760
I'm actually locked in.

367
00:23:51,790 --> 00:23:55,800
Let me just remove the token and logout.

368
00:23:55,840 --> 00:23:58,190
It's going to go to application.

369
00:23:58,360 --> 00:24:05,190
Clear everything is clear and I'm going to close this if I reload the page of course we are not antiquated.

370
00:24:05,200 --> 00:24:12,850
So again if I tried to go to dashboard it's actually a user dashboard not happening if I want to go

371
00:24:12,850 --> 00:24:13,490
home.

372
00:24:13,600 --> 00:24:15,940
It's actually happening because it's a public route.

373
00:24:16,270 --> 00:24:24,500
So go back to logon are going to log in France's passport 2:59 log in.

374
00:24:24,580 --> 00:24:26,660
We are able to go to the dashboard.

375
00:24:27,080 --> 00:24:29,410
We are logged in we shouldn't be able to enter to.

376
00:24:29,470 --> 00:24:30,470
Just a slogan.

377
00:24:30,640 --> 00:24:31,860
And it's not happening.

378
00:24:32,050 --> 00:24:34,530
So again this really works.

379
00:24:34,780 --> 00:24:38,110
And now we have an additional piece of information.

380
00:24:38,290 --> 00:24:39,590
If I go to the state.

381
00:24:39,670 --> 00:24:45,440
Of course we have inside the user data we have pretty much all the information about the user.

382
00:24:45,550 --> 00:24:54,120
So now whenever we load this user dashboard we have access to the prop's right here at the top.

383
00:24:54,340 --> 00:24:58,680
And if you remember we are also passing the Propst to this component.

384
00:24:58,780 --> 00:25:06,700
So we have something inside that this component where we can access this prompts the user and get the

385
00:25:06,700 --> 00:25:09,100
user information right.

386
00:25:09,100 --> 00:25:09,590
All right.

387
00:25:09,700 --> 00:25:13,220
So that is get you know we are we are pretty much done with this.

388
00:25:13,240 --> 00:25:18,370
So on the next section are going to be complaining this is going to be finishing this using information

389
00:25:18,370 --> 00:25:20,510
we're going to call it that prompts and everything else.

390
00:25:20,740 --> 00:25:26,080
And then of course we going to move on to a different thing so we can change it and do something something

391
00:25:26,080 --> 00:25:29,350
different than you know forms and everything else.

392
00:25:29,350 --> 00:25:29,820
All right.

393
00:25:29,830 --> 00:25:32,020
So let's go to the next one and keep going.

