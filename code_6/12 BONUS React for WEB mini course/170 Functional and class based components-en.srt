1
00:00:02,090 --> 00:00:04,920
So now we're going to be talking about types of components.

2
00:00:05,000 --> 00:00:07,980
First I'm going to delete this because you're not going to need it.

3
00:00:08,030 --> 00:00:10,450
And right here I'm going to say Hetter.

4
00:00:10,760 --> 00:00:15,480
So whenever you work with re-act you have two main types of components.

5
00:00:15,620 --> 00:00:20,230
You have a functional component where a class base component.

6
00:00:20,240 --> 00:00:23,120
So the difference is what do you want to do with this.

7
00:00:23,120 --> 00:00:24,960
That's the main difference.

8
00:00:25,040 --> 00:00:31,430
And at this point this header is just a function it mind receives and arguments we will do that later.

9
00:00:31,550 --> 00:00:36,600
But for now is the function returning some GSX you know something really basic.

10
00:00:36,770 --> 00:00:39,150
So it's returning some static data.

11
00:00:39,160 --> 00:00:39,920
Let's get.

12
00:00:39,960 --> 00:00:42,450
So this is a functional component.

13
00:00:42,570 --> 00:00:48,470
This component dysfunctional the functional components doesn't care much what happens with the rest

14
00:00:48,620 --> 00:00:49,730
of the components.

15
00:00:49,770 --> 00:00:55,340
It doesn't care what happens with index or what happens with news list or whatever is just returning

16
00:00:55,340 --> 00:00:58,280
some some data some GSX.

17
00:00:58,550 --> 00:01:02,870
It's like saying OK do it my job is just to send some GSX.

18
00:01:02,900 --> 00:01:03,980
That's what I'm doing.

19
00:01:04,070 --> 00:01:06,470
I don't care what happens with the rest of the components.

20
00:01:06,470 --> 00:01:10,250
My job is just to do this so I'm going to go ahead and do it.

21
00:01:10,400 --> 00:01:11,690
And that's what it's doing.

22
00:01:11,690 --> 00:01:15,260
That's the main purpose of a functional component.

23
00:01:15,650 --> 00:01:19,700
So on the other hand you have the class based components.

24
00:01:19,700 --> 00:01:22,570
Those components are a little bit more complex.

25
00:01:22,610 --> 00:01:29,750
They have the ability to know what's happening on the application and they could have a record or maybe

26
00:01:29,800 --> 00:01:34,730
a record of data that could be changing inside our application.

27
00:01:34,740 --> 00:01:36,780
Don't worry we going to do that a lot.

28
00:01:37,040 --> 00:01:39,710
So for example our header is going to be real simple.

29
00:01:39,710 --> 00:01:43,990
We'll have a logo and an input to search and filter the news.

30
00:01:44,030 --> 00:01:45,970
So I'm going to write it right now.

31
00:01:46,010 --> 00:01:49,990
We're going to have instead of a div you can have a header just like that.

32
00:01:50,000 --> 00:01:51,740
Let me change it right here.

33
00:01:51,750 --> 00:01:55,110
Header and this header is going to have logos.

34
00:01:55,130 --> 00:01:58,490
I'm going to say you did and you know just logo whatever.

35
00:01:58,550 --> 00:02:02,460
For now it's just real simple and they can have an impact.

36
00:02:02,870 --> 00:02:11,050
So this input and me type which is going to be text and they see everything is good logo and in text.

37
00:02:11,060 --> 00:02:18,060
So whenever we type something inside this input let me make this bigger whenever we type a keyboard

38
00:02:18,120 --> 00:02:18,990
right here.

39
00:02:19,130 --> 00:02:26,900
This header is going to connect to the news list and it's going to try to search and used a post with

40
00:02:26,900 --> 00:02:29,360
the same keyboard in the title.

41
00:02:29,360 --> 00:02:36,770
So we type M.B.A. right here just M.B.A. we're going to catch disvalue go to the database and rendered

42
00:02:36,770 --> 00:02:38,880
that news inside news list.

43
00:02:38,900 --> 00:02:44,170
So this Hetter needs a way to connect with the rest of the application.

44
00:02:44,180 --> 00:02:47,750
So again this could be we need to do something else right here.

45
00:02:47,750 --> 00:02:53,300
This must be a class based component because it needs to know what happens there.

46
00:02:53,330 --> 00:02:56,830
There are ways to create a functional components and emulate that.

47
00:02:56,960 --> 00:03:00,970
But for now we don't need to change this to a class based component.

48
00:03:01,370 --> 00:03:02,430
How do we do it.

49
00:03:02,450 --> 00:03:03,920
First I'm going to delete this.

50
00:03:03,930 --> 00:03:08,670
You're not going to need it for now and again to leave this just like it is.

51
00:03:08,730 --> 00:03:14,790
So now to create a class based components we can start with the key word class.

52
00:03:15,170 --> 00:03:20,430
So this class is going to need a name so we can use the same name Hetter.

53
00:03:21,140 --> 00:03:26,680
And this is creating a class Hetter is just like doing var header.

54
00:03:26,710 --> 00:03:31,670
If you if you come from the east Fae world it's kind of creating an object of course they're not the

55
00:03:31,670 --> 00:03:32,120
same.

56
00:03:32,120 --> 00:03:38,420
We have we have a lot of more features with classes but it's just like a creating an object.

57
00:03:38,480 --> 00:03:43,990
So we're creating a class with the name of Hetter and we enclose everything inside curly braces.

58
00:03:44,000 --> 00:03:45,800
That's the first part.

59
00:03:46,030 --> 00:03:46,850
OK.

60
00:03:47,240 --> 00:03:53,070
So now the hetter this class Hetter needs to connect with the re-act application.

61
00:03:53,090 --> 00:03:59,960
So what we need to do we need to do extends and then space and we need to invoke react then react.

62
00:03:59,960 --> 00:04:07,070
We have on top and this re-act has a method that is going to be called component so we can say component

63
00:04:09,580 --> 00:04:15,640
so whenever you use a class you need to use the render method just like with that right here with the

64
00:04:15,640 --> 00:04:17,560
render it's kind of different anyways.

65
00:04:18,070 --> 00:04:26,140
So to use the render method we need to again enclose everything inside render so we can say render open

66
00:04:26,140 --> 00:04:33,200
and close and then inside curl the braces going to put the whole content that we want to render.

67
00:04:33,220 --> 00:04:40,490
So again it's first we use the method render then we return something and it's going to be some GSX.

68
00:04:40,510 --> 00:04:46,750
So again if you come from the yes Fae world this is like a lot just like creating a constructor function

69
00:04:47,110 --> 00:04:53,030
and creating a method that is going to be render and then this one is going to be equal to a function

70
00:04:53,140 --> 00:04:54,060
just like that.

71
00:04:54,140 --> 00:05:01,000
That is going to return return some content you know something really dumb.

72
00:05:01,000 --> 00:05:02,980
So this is the same idea than doing this.

73
00:05:03,010 --> 00:05:08,260
Of course we have a lot more extra features with class based components that are going to be talking

74
00:05:08,260 --> 00:05:09,390
about them later.

75
00:05:09,790 --> 00:05:13,670
So get them going to delete this and save it.

76
00:05:13,680 --> 00:05:16,820
And notice that class header and then export default.

77
00:05:16,840 --> 00:05:18,440
We are exporting this class.

78
00:05:18,650 --> 00:05:21,370
We go right here we get the same result.

79
00:05:21,520 --> 00:05:27,460
For now we're not going to have are not going to get any difference from a functional component but

80
00:05:27,460 --> 00:05:29,350
begin to do it in a minute.

81
00:05:29,760 --> 00:05:30,320
So OK.

82
00:05:30,370 --> 00:05:35,890
One is we can make this we can convert this to something a little bit better.

83
00:05:36,010 --> 00:05:37,740
I'm going to be using ESX.

84
00:05:37,930 --> 00:05:40,790
So instead of doing re-act component.

85
00:05:40,930 --> 00:05:48,100
So this means that we're bringing something that calls component that it's inside react and we are importing

86
00:05:48,120 --> 00:05:49,460
we act right here.

87
00:05:49,480 --> 00:05:56,920
So with ESX we can make use of the structuring and we can say coma and then curly braces and I can say

88
00:05:57,130 --> 00:06:00,100
components just like this.

89
00:06:00,130 --> 00:06:03,010
And this is not we act it's ESX.

90
00:06:03,310 --> 00:06:09,760
So with this this is going to be called destructuring and pretty much if I delete re-act component and

91
00:06:09,760 --> 00:06:13,050
save it it's still going to work.

92
00:06:13,060 --> 00:06:14,770
So how is this working.

93
00:06:15,010 --> 00:06:21,760
Well whenever we use destructuring this is pretty much saying okay go to react and bring something that

94
00:06:21,760 --> 00:06:29,060
calls component and created a variable that calls component with a value of reactor components.

95
00:06:29,080 --> 00:06:33,440
So behind the scenes we don't see this this has happened happening in memory.

96
00:06:33,520 --> 00:06:39,620
It's entering to react and it's saying OK graph react that components and create a variable.

97
00:06:39,730 --> 00:06:44,080
So it's doing a rival that calls component some like that.

98
00:06:44,160 --> 00:06:54,820
And this one is going to be equal to react maybe make it ride react that component component.

99
00:06:54,820 --> 00:06:55,650
There we go.

100
00:06:56,080 --> 00:07:03,430
So now whenever we again change the sea to a capital C whenever we use components right here is going

101
00:07:03,430 --> 00:07:07,930
to be called to react that component is going to create an alias for this.

102
00:07:08,230 --> 00:07:10,840
So delicious.

103
00:07:11,020 --> 00:07:14,330
So this destructuring is going to be equal to that Varnell.

104
00:07:14,440 --> 00:07:19,740
That's why we can use component right here and skip that react up components.

105
00:07:19,810 --> 00:07:21,720
Of course everything is working OK.

106
00:07:21,760 --> 00:07:22,400
That's good.

107
00:07:22,540 --> 00:07:25,000
So we're going to be working a little bit more with this.

108
00:07:25,030 --> 00:07:27,410
But first we need to add some style.

109
00:07:27,430 --> 00:07:29,730
This is really really ugly.

110
00:07:29,770 --> 00:07:34,980
It's really really actually going to get we going to go back to this and check which features we get

111
00:07:34,990 --> 00:07:36,360
with classis.

112
00:07:36,400 --> 00:07:39,610
So first begin to add some stop because it's really really ugly.

113
00:07:39,610 --> 00:07:42,850
Let's go to the next one and talk about styling.

