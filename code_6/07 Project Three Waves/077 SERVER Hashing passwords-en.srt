1
00:00:00,540 --> 00:00:02,920
OK so let's hash out the password first.

2
00:00:02,940 --> 00:00:08,850
I'm going to store this inside the waves project so I'm going to store it and that's when it's going

3
00:00:08,850 --> 00:00:12,800
to be called the register and I going to start inside waves.

4
00:00:12,990 --> 00:00:19,770
So now in the future if you want to add a new user or do some more testing we can just go to register

5
00:00:19,980 --> 00:00:25,640
and this will be stored with the RA and all the data right here which just need to make a few changes.

6
00:00:25,660 --> 00:00:28,060
This no need to do all over again.

7
00:00:28,110 --> 00:00:29,490
So this is very very cool.

8
00:00:29,660 --> 00:00:30,210
OK.

9
00:00:30,480 --> 00:00:35,070
So inside the server of this logic it stays the same.

10
00:00:35,100 --> 00:00:36,670
We are able to add a user.

11
00:00:36,780 --> 00:00:38,240
Now what are we going to be doing.

12
00:00:38,280 --> 00:00:42,220
Is that before we store the user before we store it just like this.

13
00:00:42,240 --> 00:00:48,550
We're going to do something before this happens instead of this file instead of the user file We're

14
00:00:48,570 --> 00:00:50,460
going to do something before we save.

15
00:00:50,580 --> 00:00:52,170
And we're going to grab that password.

16
00:00:52,170 --> 00:00:55,090
The one that the user is entering we can hash it.

17
00:00:55,200 --> 00:00:58,270
And that's what we're going to be storing at the end.

18
00:00:58,440 --> 00:00:58,830
OK.

19
00:00:58,920 --> 00:01:04,550
So let's start with this now first before we can start.

20
00:01:04,620 --> 00:01:05,360
We need a few things.

21
00:01:05,370 --> 00:01:07,080
I'm going to go with Tom sorry.

22
00:01:07,080 --> 00:01:08,780
So what are we going to do.

23
00:01:08,790 --> 00:01:11,810
We can do we can encrypt password right.

24
00:01:11,820 --> 00:01:13,870
Can empower encrypt strength.

25
00:01:14,100 --> 00:01:16,490
So for this we need dependency.

26
00:01:16,500 --> 00:01:18,540
We've already installed called Big crypt.

27
00:01:18,540 --> 00:01:28,000
So we need to require So Konst and I say Konst then big crypt is b c r and then Y.

28
00:01:28,010 --> 00:01:30,340
P and T.

29
00:01:30,580 --> 00:01:31,500
All right.

30
00:01:31,600 --> 00:01:35,060
Now this one require open and close.

31
00:01:35,220 --> 00:01:40,040
And then of course we need to say the crypt just like this.

32
00:01:40,360 --> 00:01:41,430
OK.

33
00:01:42,060 --> 00:01:46,090
Now when whenever we encrypt something we going to use a salt.

34
00:01:46,230 --> 00:01:52,710
Now if by default the salt is 10 and I'm going to host this inside of a Barville you can just put the

35
00:01:52,710 --> 00:01:56,070
number directly on the function going to get there.

36
00:01:56,070 --> 00:01:59,160
Don't worry for now if you want just do this.

37
00:01:59,160 --> 00:01:59,810
All right.

38
00:02:00,330 --> 00:02:07,470
So OK I'm going to go at the bottom and what we need to do we need to tell the application that before

39
00:02:07,620 --> 00:02:12,320
storing before we store a user we want to hash that password.

40
00:02:12,540 --> 00:02:16,730
So I'm going to use the going to enter the user schema and going to do Prete.

41
00:02:17,010 --> 00:02:24,420
So three with prie is that before we do anything we want to do something all right and then we specify

42
00:02:24,450 --> 00:02:26,940
what action we want to do first.

43
00:02:27,090 --> 00:02:28,320
It's safe.

44
00:02:28,350 --> 00:02:36,120
So before we save anything before we go to here we're going to do this now before we after we do this

45
00:02:36,180 --> 00:02:41,000
after the we pacify what we are going to be listening we need to run a function.

46
00:02:41,160 --> 00:02:43,860
So I'm going to use five right here.

47
00:02:43,860 --> 00:02:46,200
You could use ESX doesn't matter.

48
00:02:46,200 --> 00:02:52,310
The thing is that sometimes depending on the version you're using it fails with the A6 or not you know.

49
00:02:52,320 --> 00:02:55,050
So I just want to be sure that everything works.

50
00:02:55,050 --> 00:02:56,870
So going to use iOS 5.

51
00:02:56,870 --> 00:03:00,480
So we're going to run a function and we're going to be passing this next.

52
00:03:00,810 --> 00:03:07,590
So this next whenever we want to move forward which is mean after we hashed a password we're going to

53
00:03:07,590 --> 00:03:13,000
call this next and next is going to do you know the rest of what needs to do.

54
00:03:12,990 --> 00:03:14,390
Don't worry we will get there.

55
00:03:14,730 --> 00:03:16,970
So first I'm going to make.

56
00:03:17,000 --> 00:03:20,310
If you know about is five and six is that with iOS 6.

57
00:03:20,400 --> 00:03:21,520
We didn't need to.

58
00:03:21,570 --> 00:03:23,190
We didn't have a problem with the scope.

59
00:03:23,340 --> 00:03:24,500
We can use this.

60
00:03:24,580 --> 00:03:31,770
And there's it's always you know this this environment now with iOS 5 we need to create an alias for

61
00:03:31,770 --> 00:03:32,530
this.

62
00:03:32,730 --> 00:03:36,860
So I got to say bar user it's equal to this.

63
00:03:37,080 --> 00:03:43,280
So now whenever I make reference to user it's going to be the user of this and not this function.

64
00:03:43,530 --> 00:03:44,500
Right.

65
00:03:44,550 --> 00:03:46,980
Very common as five Ennius x.

66
00:03:46,980 --> 00:03:49,050
So what do we want to do.

67
00:03:49,260 --> 00:03:51,620
I want to encrypt the password.

68
00:03:51,630 --> 00:03:52,250
All right.

69
00:03:52,380 --> 00:03:58,250
So I'm going to call script just like this and I'm going to generate a salt and there's method.

70
00:03:58,260 --> 00:04:05,890
It's actually from big crypt now whenever we generate a salt run we need to do is we need to pass the

71
00:04:05,890 --> 00:04:06,890
salt.

72
00:04:07,050 --> 00:04:08,290
So we got it right here.

73
00:04:08,310 --> 00:04:10,120
So salt.

74
00:04:10,220 --> 00:04:10,810
All right.

75
00:04:11,260 --> 00:04:17,860
After we generally Dassault going to run a function opening close and we pass an error and the actual

76
00:04:17,860 --> 00:04:19,120
salt.

77
00:04:19,150 --> 00:04:19,600
All right.

78
00:04:19,720 --> 00:04:22,680
And then of course I can open and close.

79
00:04:22,780 --> 00:04:30,080
Now if we do have an hour so I'm going to say if are we going to return next with an error.

80
00:04:30,250 --> 00:04:36,940
So what next does it kills whatever we are doing right here and move us forward to the next thing.

81
00:04:37,090 --> 00:04:44,930
So again what we're doing great here is that we are receiving a request we are going to do the pre safe

82
00:04:45,340 --> 00:04:50,560
and then when we go next we just keep doing whatever it is that we want to do which is this you know

83
00:04:50,650 --> 00:04:53,170
outputting the response and everything else.

84
00:04:53,180 --> 00:04:54,000
All right.

85
00:04:54,580 --> 00:04:59,680
So of course if we get an error we're going to kill and we just can't move forward if we don't get an

86
00:04:59,680 --> 00:05:00,150
error.

87
00:05:00,220 --> 00:05:01,550
We can do something else.

88
00:05:01,600 --> 00:05:05,790
And this case we're going to Dubik crypt and we're going to do the hash method.

89
00:05:05,830 --> 00:05:11,690
Give us now what we're going to be using is the passport of the user to hash it.

90
00:05:11,710 --> 00:05:15,800
So I'm going to say user that password why am using user.

91
00:05:15,820 --> 00:05:18,490
Because right here emitted a reference to user.

92
00:05:18,610 --> 00:05:21,160
If we're using iOS 6 we can do this.

93
00:05:21,160 --> 00:05:23,740
But in this case we are using user and he has five.

94
00:05:23,770 --> 00:05:25,820
So I do hash.

95
00:05:26,110 --> 00:05:27,900
I pass the user password.

96
00:05:27,940 --> 00:05:29,180
That's what we're going to do.

97
00:05:29,350 --> 00:05:31,080
And we need assault.

98
00:05:31,240 --> 00:05:33,790
So this is the sort of first Genner dissolved.

99
00:05:33,910 --> 00:05:37,600
And this will return a sort which is kind of a hash.

100
00:05:37,900 --> 00:05:44,300
So we pass the salt then are going to do this and we need to run a callback function.

101
00:05:44,320 --> 00:05:48,030
All right so this function will have an error.

102
00:05:48,070 --> 00:05:55,150
If we do get an error and then hash which is the hashed passport of that's all right again we need to

103
00:05:55,150 --> 00:05:57,550
do the same thing if we do get an error.

104
00:05:57,760 --> 00:06:03,110
We need to return next with the actual error.

105
00:06:03,790 --> 00:06:04,290
That's it.

106
00:06:04,350 --> 00:06:05,020
OK.

107
00:06:05,410 --> 00:06:11,830
If we don't get an error we want to move forward and what we want to do we want to said this user password

108
00:06:12,400 --> 00:06:15,800
the one with you know the normal trend without hash.

109
00:06:15,850 --> 00:06:21,940
We want to say OK now this user password instead of the string that they are providing to us we want

110
00:06:21,940 --> 00:06:24,870
to store it as a hash instead of this.

111
00:06:24,880 --> 00:06:30,670
So I entered the user password and I say this one it's equal to whatever hash we are getting from this

112
00:06:30,670 --> 00:06:32,800
method and that's it.

113
00:06:32,800 --> 00:06:35,580
Now the user password it's equal to the hash.

114
00:06:35,860 --> 00:06:40,260
And then of course we call them next and we move forward to the next thing.

115
00:06:40,540 --> 00:06:41,350
All right.

116
00:06:41,770 --> 00:06:43,550
OK let's let's give it a try.

117
00:06:43,720 --> 00:06:45,340
We need to add one more things right here.

118
00:06:45,340 --> 00:06:47,340
But for now it's going to work.

119
00:06:47,730 --> 00:06:48,180
OK.

120
00:06:48,370 --> 00:06:55,090
So I'm going to go right here to our saved register and I'm going to change to Frances three whatever

121
00:06:55,750 --> 00:06:59,120
and I'm going to make sure that I'm returning the whole document.

122
00:06:59,180 --> 00:07:00,890
Yes we are doing that.

123
00:07:00,910 --> 00:07:02,000
Going to do sent.

124
00:07:02,140 --> 00:07:03,010
Let's see what happens.

125
00:07:03,070 --> 00:07:03,430
OK.

126
00:07:03,580 --> 00:07:07,830
So we get the user data back and we have the hashed version of this.

127
00:07:07,900 --> 00:07:08,970
Why are we hashing.

128
00:07:08,980 --> 00:07:10,090
It's not secure.

129
00:07:10,090 --> 00:07:11,720
To put it like this.

130
00:07:12,010 --> 00:07:16,560
So later now we are registering later the user needs to log in.

131
00:07:16,600 --> 00:07:19,520
So when they log in they provide their password.

132
00:07:19,630 --> 00:07:25,720
And what we need to do we need to go to the database grab the passport compare with the hash one we

133
00:07:25,720 --> 00:07:28,440
need to decrypt not encrypt decrypt.

134
00:07:28,780 --> 00:07:32,960
And if the passports match we let the user move forward.

135
00:07:33,010 --> 00:07:36,030
Of course we are not there yet.

136
00:07:36,050 --> 00:07:45,650
Now later we will have a section where the user can change the name or the last name or maybe the e-mail.

137
00:07:45,740 --> 00:07:53,140
Right now if we do it just like this we are saying that just like this sorry just like this you're doing

138
00:07:53,170 --> 00:07:59,170
on every action that it save just to generate a new hash of the password.

139
00:07:59,560 --> 00:08:05,170
So maybe they are already richest stert and they want to change the name and after they change it we

140
00:08:05,170 --> 00:08:07,230
are rehashing the passport.

141
00:08:07,240 --> 00:08:12,310
So this is a problem because we are pretty much changed and hash over and over and over again.

142
00:08:12,460 --> 00:08:18,640
We just want to hash out a password when Navy whenever they change a password or whenever they of course

143
00:08:19,690 --> 00:08:21,940
do register.

144
00:08:21,940 --> 00:08:23,980
So for this we're going to do.

145
00:08:23,980 --> 00:08:31,690
We're going to say if open close if they're going to put all of this information inside of the if now

146
00:08:31,690 --> 00:08:38,880
we have something inside of a user you know actually it's from Mungo that it's called is modified.

147
00:08:39,070 --> 00:08:42,990
So malty find and this is a method.

148
00:08:43,300 --> 00:08:48,010
So what we can check if we can check if the user is trying to modify the password if not if they are

149
00:08:48,010 --> 00:08:52,840
doing of course we are not going to do anything which is going to generate a new solid whenever they

150
00:08:53,080 --> 00:08:55,120
register which is the password.

151
00:08:55,330 --> 00:08:59,920
If they are doing something else that it's not related to passport you're going to move forward.

152
00:08:59,920 --> 00:09:05,500
So right now I need to pass to it's modified and I need to pass what are we changing what are we listening

153
00:09:05,620 --> 00:09:07,130
to go to this scenario.

154
00:09:07,180 --> 00:09:10,000
And in this case it's the key word password.

155
00:09:10,000 --> 00:09:16,390
So if they are changing the password then we do this we need to encrypt if they are not changing the

156
00:09:16,390 --> 00:09:17,160
password.

157
00:09:17,350 --> 00:09:22,180
We need to move forward and not encrypt the passport again.

158
00:09:22,180 --> 00:09:22,730
All right.

159
00:09:22,840 --> 00:09:23,100
OK.

160
00:09:23,140 --> 00:09:24,090
So this is done.

161
00:09:24,270 --> 00:09:25,660
So let's try it again.

162
00:09:25,660 --> 00:09:28,330
I'm going to go right here and say Frances.

163
00:09:28,390 --> 00:09:32,800
Number four send and we're good to go.

164
00:09:32,800 --> 00:09:33,580
Very good man.

165
00:09:33,580 --> 00:09:33,890
All right.

166
00:09:33,910 --> 00:09:37,660
We are able to handle everything now on the next sections.

167
00:09:38,050 --> 00:09:46,000
We will need to log in a user and we need to create a new route for this and new logic for this not

168
00:09:46,100 --> 00:09:46,440
for this.

169
00:09:46,430 --> 00:09:49,570
We're going to do something else but we need to add more things.

170
00:09:49,570 --> 00:09:49,930
All right.

171
00:09:50,050 --> 00:09:53,120
Well let's go to the next one and do the luggin section.

