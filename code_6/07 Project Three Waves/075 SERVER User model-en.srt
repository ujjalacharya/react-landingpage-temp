1
00:00:00,620 --> 00:00:05,300
All right so one of the things you're going to do in the final project in our application is registering

2
00:00:05,300 --> 00:00:08,130
users logging users and everything else.

3
00:00:08,320 --> 00:00:10,040
We got to do with users.

4
00:00:10,040 --> 00:00:15,900
So we need to create a more user model right so because we use in Mongo DVH.

5
00:00:15,950 --> 00:00:16,580
So OK.

6
00:00:16,790 --> 00:00:22,870
So first make sure you have this open of all the projects we can get our waifs project right here in

7
00:00:22,880 --> 00:00:25,810
a in a couple of minutes and more open.

8
00:00:25,820 --> 00:00:27,140
We need to open post-meno.

9
00:00:27,180 --> 00:00:27,410
Right.

10
00:00:27,410 --> 00:00:30,020
So make sure you have a postman open.

11
00:00:30,020 --> 00:00:36,710
So now before we can add things to to Mongo DVH that got to do with users before we can do this we will

12
00:00:36,710 --> 00:00:38,580
need it of course a route.

13
00:00:38,840 --> 00:00:41,680
So we're going to go right here and say users.

14
00:00:41,870 --> 00:00:45,070
So everything below this is going to be related to users.

15
00:00:45,170 --> 00:00:50,030
So the first thing we're going to do we're going to register a user so I'm going say app I'm going to

16
00:00:50,240 --> 00:00:56,210
say post and we're going to be listening for post requests and all the locations are going to go to

17
00:00:56,210 --> 00:01:05,420
forward slash API then forward slash users plural and then register and all the requests in our server

18
00:01:05,690 --> 00:01:06,900
are going to go to API.

19
00:01:06,980 --> 00:01:07,640
All right.

20
00:01:07,730 --> 00:01:13,070
Then of course after we do after we get a request from this we're going to get the request the actual

21
00:01:13,070 --> 00:01:17,170
request and the response is pretty standard.

22
00:01:17,540 --> 00:01:19,490
So of course right now we can to do something.

23
00:01:19,490 --> 00:01:24,330
The only thing that are going to do is send a status of 200.

24
00:01:24,350 --> 00:01:27,200
So I'm going to say status and then 200.

25
00:01:27,290 --> 00:01:29,310
We're going to send a send a positive response.

26
00:01:29,330 --> 00:01:31,420
We're not doing anything just yet.

27
00:01:31,910 --> 00:01:39,290
So if I go to hear from postman for example we're going to get a status of 200 are going to be going

28
00:01:39,290 --> 00:01:42,150
to do it later before we can do this.

29
00:01:42,200 --> 00:01:43,940
We need a user model.

30
00:01:44,090 --> 00:01:50,180
We need to go to the server directory and create a new directory called models.

31
00:01:50,180 --> 00:01:54,680
So inside models we will store all the models in our project.

32
00:01:54,750 --> 00:01:57,610
We'll have users we will have products.

33
00:01:57,680 --> 00:02:02,660
So we are going to get a lot of models one for categories and a different type of category so we're

34
00:02:02,660 --> 00:02:08,630
going to get a lot of models the most to complete one are the user model which is the one we're going

35
00:02:08,640 --> 00:02:14,490
to do now and then the products I'm going to go to models create a user model.

36
00:02:15,010 --> 00:02:18,200
So inside the user model we need to required mongoose.

37
00:02:18,200 --> 00:02:30,540
So Konst mon geuss mon and then it goes and require opening close and then Mohn goes all right.

38
00:02:30,680 --> 00:02:36,250
So now whenever we start a schema we need to create a schema right before we put the model in.

39
00:02:36,500 --> 00:02:42,230
So we say Konst and we always start with keyword that actually we are using since we were working with

40
00:02:42,230 --> 00:02:42,800
users.

41
00:02:42,860 --> 00:02:43,740
We use user.

42
00:02:43,970 --> 00:02:52,970
And then the keyword schema its equal to mongoose dot and we use the schema method of mongoose opening

43
00:02:52,970 --> 00:02:53,930
close.

44
00:02:53,930 --> 00:03:00,020
Now this schema takes an object and inside of here we will need to put pretty much everything.

45
00:03:00,020 --> 00:03:04,980
So at the end we need to export this user schema so we can use it on the server.

46
00:03:05,180 --> 00:03:10,190
So I'm going to go at the bottom I'm going to say Konst and make sure this one is capital and I'm going

47
00:03:10,190 --> 00:03:11,110
to say user.

48
00:03:11,360 --> 00:03:20,840
So this user is equal to mongoose and say we are going to create a model out of this user schema and

49
00:03:21,000 --> 00:03:24,830
the name of the model is going to be user capital user.

50
00:03:24,830 --> 00:03:30,950
And we're going to be using this user's comment and at the end since we have a new model created right

51
00:03:30,950 --> 00:03:40,650
here we need to export that Marvel user so module that exports equals and then user.

52
00:03:40,920 --> 00:03:46,610
And now whenever we include this file inside the server we will be able to work with users inside Mongo

53
00:03:46,610 --> 00:03:47,110
DB.

54
00:03:47,270 --> 00:03:53,240
All right of course we need to do a lot of things first the user schema needs some configuration.

55
00:03:53,330 --> 00:03:55,310
So we will have a lot of things.

56
00:03:55,340 --> 00:03:56,880
First we need an email.

57
00:03:56,900 --> 00:04:02,720
So I'm going to say e-mail opening close and this is the value the key pretty much of our entry.

58
00:04:02,780 --> 00:04:08,360
So we need to define the type the type is going to be a type of a string and noted that this is.

59
00:04:08,360 --> 00:04:10,180
Notice that this is green.

60
00:04:10,220 --> 00:04:12,500
This is actually for mongoose.

61
00:04:12,680 --> 00:04:15,620
And if you missed this not going to really work.

62
00:04:15,650 --> 00:04:22,580
So make sure you have a capital S. so we can said we can tell to the database to Mago the be that this

63
00:04:22,970 --> 00:04:24,110
value this key.

64
00:04:24,110 --> 00:04:26,120
It's required every time.

65
00:04:26,120 --> 00:04:29,440
So we're going to say required and it's going to be true.

66
00:04:29,840 --> 00:04:31,730
Coma we're going to trim it.

67
00:04:31,790 --> 00:04:32,750
We don't want one.

68
00:04:32,750 --> 00:04:34,340
Whitespace is right here.

69
00:04:34,340 --> 00:04:41,090
So if we store something it's going to trim it and then we won this email to be unique because the e-mails

70
00:04:41,150 --> 00:04:41,880
are unique.

71
00:04:42,080 --> 00:04:47,950
So we say unique just like this and we say that this one is true.

72
00:04:48,320 --> 00:04:49,170
All right and that's it.

73
00:04:49,190 --> 00:04:50,500
That's it for e-mail.

74
00:04:50,510 --> 00:04:52,180
Then we didn't have passports.

75
00:04:52,220 --> 00:04:59,970
So passport open and close and the password again it's a type of strings on that copy paste is going

76
00:04:59,970 --> 00:05:01,190
to be required.

77
00:05:01,200 --> 00:05:01,960
True.

78
00:05:02,040 --> 00:05:03,430
So required.

79
00:05:03,550 --> 00:05:06,780
True and a minimum length.

80
00:05:06,780 --> 00:05:11,270
I'm going to say men and then length just like this.

81
00:05:11,340 --> 00:05:11,950
All right.

82
00:05:12,320 --> 00:05:14,350
And the length is going to be five.

83
00:05:14,490 --> 00:05:15,260
Doesn't really matter.

84
00:05:15,270 --> 00:05:18,030
Right now we're going to check that later.

85
00:05:18,030 --> 00:05:23,370
So I'm going to say name and we're going to need in the name of the user and this one is again required

86
00:05:23,430 --> 00:05:24,660
when a user registers.

87
00:05:24,780 --> 00:05:26,320
We need the actual name.

88
00:05:26,520 --> 00:05:30,720
So I'm going to say required I'm going to say type string.

89
00:05:30,780 --> 00:05:32,320
Pretty much the same thing.

90
00:05:32,640 --> 00:05:36,360
And this time you know a name could be really long.

91
00:05:36,540 --> 00:05:42,240
So I'm going to add max length so the max length it's 100 characters.

92
00:05:42,650 --> 00:05:43,130
All right.

93
00:05:44,090 --> 00:05:47,360
You know one hundred characters for name is too much.

94
00:05:47,600 --> 00:05:51,120
So OK so pretty much the same thing would lead with last name.

95
00:05:51,270 --> 00:05:58,560
We have a last name and again type string required true and the max length of 100.

96
00:05:58,860 --> 00:06:04,410
Now much much later on the application and I'm going at it now because you know then if we do it then

97
00:06:04,530 --> 00:06:06,250
we need to go back to users.

98
00:06:06,510 --> 00:06:07,850
So I don't really want to do this.

99
00:06:07,860 --> 00:06:09,390
I want to do it right now.

100
00:06:09,390 --> 00:06:16,160
We're going to have cart users are able to Bubbe Shaab from our place you know and maybe at night into

101
00:06:16,200 --> 00:06:17,070
the cart.

102
00:06:17,070 --> 00:06:24,020
So whenever they do that we need to store that value or whatever they added inside the user database.

103
00:06:24,030 --> 00:06:24,800
Right.

104
00:06:24,830 --> 00:06:25,550
All right.

105
00:06:25,860 --> 00:06:31,800
So type and they might add many many things many products.

106
00:06:31,800 --> 00:06:33,680
So we need a type of an array.

107
00:06:34,170 --> 00:06:39,300
And this a raid is going to start as a default of nothing.

108
00:06:39,320 --> 00:06:40,130
All right.

109
00:06:40,140 --> 00:06:43,890
So if they don't have it they don't have anything inside the value of this.

110
00:06:43,890 --> 00:06:45,060
It's nothing.

111
00:06:45,060 --> 00:06:52,700
Now sometimes up pretty much if they buy something they're going to have a history history of purchases.

112
00:06:52,950 --> 00:06:57,450
So open and close and same thing type array and default nothing.

113
00:06:57,600 --> 00:07:01,970
Later of course when we reached a section we'll see how they work.

114
00:07:02,100 --> 00:07:05,650
Now whenever a user registers they need to roll.

115
00:07:05,670 --> 00:07:11,570
Now most of the times and actually you can check where you can decide what you want to do right here.

116
00:07:12,090 --> 00:07:18,470
You can decide to use a string or maybe a number or maybe a boolean if you have different types of you

117
00:07:18,460 --> 00:07:19,770
know roles.

118
00:07:19,770 --> 00:07:25,720
Maybe it's a good idea to use a number in this case we just have two which is the user and the admin.

119
00:07:25,830 --> 00:07:26,250
All right.

120
00:07:26,250 --> 00:07:28,620
So I'm going to say roll opening close.

121
00:07:28,710 --> 00:07:38,910
And this is type number capital and and the default value which is not administrators is going to be

122
00:07:38,910 --> 00:07:39,580
user.

123
00:07:39,750 --> 00:07:46,680
So the only way to give admin rights to someone it's for a different administrator to change the role

124
00:07:46,740 --> 00:07:48,270
of a different user.

125
00:07:48,300 --> 00:07:49,170
Right.

126
00:07:49,350 --> 00:07:50,810
And then of course we're going to get tokens.

127
00:07:50,850 --> 00:07:57,900
So I'm going to say token open it close and the type of the strain and of course it's not required.

128
00:07:58,400 --> 00:08:02,180
So we will do a lot of love tokens in the next few sections.

129
00:08:02,430 --> 00:08:08,340
So right here promotor we have our whole user schema and we are passing it right here.

130
00:08:08,370 --> 00:08:12,050
So now to use it inside the server as we need to bring it.

131
00:08:12,060 --> 00:08:16,890
So we're going to go right here and say models are right.

132
00:08:16,980 --> 00:08:27,090
So Konst open and close user and this user it's equal to require open close for Slash models and then

133
00:08:27,180 --> 00:08:27,920
user.

134
00:08:28,050 --> 00:08:34,680
So now whatever we want to do something to the user or store something or whatever we can make a reference

135
00:08:34,680 --> 00:08:37,690
to that user right here and it's going to work.

136
00:08:37,710 --> 00:08:38,470
All right.

137
00:08:38,870 --> 00:08:39,360
OK.

138
00:08:39,420 --> 00:08:41,060
So far so good.

139
00:08:41,250 --> 00:08:43,160
So now we're going to really begin to be doing.

140
00:08:43,170 --> 00:08:47,910
We're going to I'm going to open post-bin and we will start registering in user.

141
00:08:47,910 --> 00:08:50,010
So let's go to the next section and start with this.

